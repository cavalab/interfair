{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "969d6a34",
   "metadata": {},
   "source": [
    "# Mitigating Disparities\n",
    "\n",
    "This demo shows how to run the `mitigate_disparity` scripot on a development dataset. \n",
    "Below, we demonstrate how to run `mitgate_disparity.py` from the command line using a model trained to predict risk of admission to the emergency department using the freely available [MIMIC-IV repository](https://www.nature.com/articles/s41597-022-01899-x). \n",
    "\n",
    "## Inputs\n",
    "\n",
    "In addition to providing a dataset, the user should identify protected features by providing a list of column names corresponding to demographics and/or other variables over which fairness should be sought.\n",
    "\n",
    "## Continuous Updating\n",
    "\n",
    "This script may also be used to update a model with new data by passing a `starting_point` parameter. \n",
    "This allows models to be continously updated over time as new biases arise and dataset shift occurs, without having to start from scratch. \n",
    "Under the hood, this is done by setting `checkpoint=True` in the `FomoClassifier` object. \n",
    "See the [Fomo docs](https://cavalab.org/fomo/) for more information on options. \n",
    "\n",
    "You may also [browse the API](https://cavalab.org/interfair/api.html) for `mitigate_disparity.py`. \n",
    "\n",
    "\n",
    "Below, we run `mitigate_disparity.py` using a development dataset and specifying that we want to ensure fairness with respect to the features named ethnicity, gender, and insurance. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "919eea11",
   "metadata": {},
   "outputs": [],
   "source": [
    "%run ../mitigate_disparity.py \\\n",
    "    --dataset ../data/mimic/development_dataset.train.csv \\\n",
    "    --protected_features ethnicity,gender,insurance "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c29d6768",
   "metadata": {},
   "source": [
    "Calling `mitigate_disparity.py` will produce an `estimator.pkl` file that can be loaded for further analysis. \n",
    "We demonstrate this below."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "74d5bbcb",
   "metadata": {},
   "source": [
    "## Visualize fairness/error trade-offs\n",
    "\n",
    "Once training is done, we can view a set of candidate models. \n",
    "The red dot indicates the model that was selected. \n",
    "In addition to the default \"PseudoWeights\" approach, FOMO provides other multi-criteria decsion making (MCDM) algorithms via pymoo."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4ccaf9ac",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<pymoo.visualization.scatter.Scatter at 0x7f351266cb50>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pickle\n",
    "with open('../estimator.pkl','rb') as f:\n",
    "    est = pickle.load(f)\n",
    "est.plot().show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "44f51dd7",
   "metadata": {},
   "source": [
    "## check test set performance\n",
    "\n",
    "This cell generates input for the measure_disparity script."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4a35e0ad",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "insurance\n",
      "['Medicaid', 'Medicare', 'Other']\n",
      "[2 0 1]\n",
      "ethnicity\n",
      "['AMERICAN INDIAN/ALASKA NATIVE', 'ASIAN', 'BLACK/AFRICAN AMERICAN', 'HISPANIC/LATINO', 'WHITE']\n",
      "[4 3 2 0 1]\n",
      "gender\n",
      "['F', 'M']\n",
      "[1 0]\n"
     ]
    }
   ],
   "source": [
    "# add path to sys to import functions\n",
    "import os \n",
    "import sys\n",
    "dir_path = os.getcwd()\n",
    "sys.path.insert(0,os.path.abspath(os.path.join(dir_path, '..')))\n",
    "\n",
    "from utils import make_measure_dataset\n",
    "import pandas as pd\n",
    "\n",
    "import pickle\n",
    "with open('../estimator.pkl','rb') as f:\n",
    "    est = pickle.load(f)\n",
    "    \n",
    "df_test = pd.read_csv('../data/mimic/development_dataset.test.csv')\n",
    "X_test = df_test.drop(columns='binary outcome')\n",
    "y_test = df_test['binary outcome']\n",
    "make_measure_dataset(est, 'fomo', X_test, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "02a06a4f",
   "metadata": {},
   "source": [
    "## measure change in disparity measures\n",
    "\n",
    "Now that we have an updated model, we can check how our disparity measures have changed. \n",
    "Below we run `measure_disparity.py` with our new results and compare the results to the old ones. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "1026dd49",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "reading in ../fomo_model_mimic4_admission.csv\n",
      "demographic columns: ['insurance', 'ethnicity', 'gender']\n",
      "========================================\n",
      "Overall Performance\n",
      "========================================\n",
      "\tMeasures of predictive bias on the whole population.\n",
      "╭─────────┬─────────┬───────────────────┬───────┬───────┬────────────╮\n",
      "│   AUROC │   AUPRC │   Positivity Rate │   FPR │   FNR │   Accuracy │\n",
      "├─────────┼─────────┼───────────────────┼───────┼───────┼────────────┤\n",
      "│   0.859 │    0.74 │             0.297 │ 0.053 │ 0.537 │      0.804 │\n",
      "╰─────────┴─────────┴───────────────────┴───────┴───────┴────────────╯\n",
      "========================================\n",
      "Subgroup Fairness Violations\n",
      "========================================\n",
      "\tMeasures the deviation in performance for marginal and intersectional groups.\n",
      "\tNote that these deviation are weighted by group prevalence to produce stable estimates when sample sizes are small.\n",
      "╭─────────────┬───────────────────────────────┬──────────┬─────────────────────┬─────────┬─────────┬───────────────────╮\n",
      "│   insurance │                     ethnicity │   gender │   Brier Score (MSE) │     FNR │     FPR │   Positivity Rate │\n",
      "├─────────────┼───────────────────────────────┼──────────┼─────────────────────┼─────────┼─────────┼───────────────────┤\n",
      "│         any │                           any │        F │              -0.006 │   0.003 │  -0.004 │            -0.011 │\n",
      "│         any │                           any │        M │               0.006 │  -0.005 │   0.006 │             0.011 │\n",
      "│         any │ AMERICAN INDIAN/ALASKA NATIVE │      any │                 0.0 │   0.014 │  -0.007 │              -0.0 │\n",
      "│         any │                         ASIAN │      any │               0.001 │   0.017 │   0.006 │               0.0 │\n",
      "│         any │        BLACK/AFRICAN AMERICAN │      any │              -0.013 │   0.011 │  -0.033 │          **-0.022 │\n",
      "│         any │               HISPANIC/LATINO │      any │              -0.005 │    0.01 │  -0.035 │            -0.009 │\n",
      "│         any │                         WHITE │      any │             **0.016 │  -0.008 │    0.02 │             0.031 │\n",
      "│    Medicaid │                           any │      any │              -0.006 │   0.006 │   -0.03 │            -0.009 │\n",
      "│    Medicaid │ AMERICAN INDIAN/ALASKA NATIVE │        F │                -0.0 │   0.009 │  -0.069 │              -0.0 │\n",
      "│    Medicaid │ AMERICAN INDIAN/ALASKA NATIVE │        M │                -0.0 │    -0.0 │  -0.019 │              -0.0 │\n",
      "│    Medicaid │                         ASIAN │        F │                -0.0 │   0.015 │  -0.001 │              -0.0 │\n",
      "│    Medicaid │                         ASIAN │        M │                 0.0 │    0.01 │   0.012 │               0.0 │\n",
      "│    Medicaid │        BLACK/AFRICAN AMERICAN │        F │              -0.002 │   0.008 │  -0.047 │            -0.003 │\n",
      "│    Medicaid │        BLACK/AFRICAN AMERICAN │        M │              -0.001 │   0.005 │   -0.05 │            -0.002 │\n",
      "│    Medicaid │               HISPANIC/LATINO │        F │              -0.001 │   0.011 │   -0.05 │            -0.002 │\n",
      "│    Medicaid │               HISPANIC/LATINO │        M │                -0.0 │   0.021 │  -0.028 │            -0.001 │\n",
      "│    Medicaid │                         WHITE │        F │                -0.0 │   0.006 │  -0.003 │              -0.0 │\n",
      "│    Medicaid │                         WHITE │        M │              -0.001 │  -0.004 │   -0.01 │              -0.0 │\n",
      "│    Medicare │                           any │      any │               0.006 │  -0.015 │   0.016 │             0.017 │\n",
      "│    Medicare │ AMERICAN INDIAN/ALASKA NATIVE │        F │                 0.0 │   0.002 │ **0.064 │               0.0 │\n",
      "│    Medicare │ AMERICAN INDIAN/ALASKA NATIVE │        M │                 0.0 │   0.013 │   0.018 │               0.0 │\n",
      "│    Medicare │                         ASIAN │        F │                 0.0 │   0.019 │   0.011 │               0.0 │\n",
      "│    Medicare │                         ASIAN │        M │                 0.0 │   0.013 │   0.015 │               0.0 │\n",
      "│    Medicare │        BLACK/AFRICAN AMERICAN │        F │              -0.001 │   0.009 │   -0.02 │            -0.002 │\n",
      "│    Medicare │        BLACK/AFRICAN AMERICAN │        M │              -0.001 │   0.011 │  -0.026 │            -0.001 │\n",
      "│    Medicare │               HISPANIC/LATINO │        F │              -0.001 │  -0.002 │  -0.029 │            -0.001 │\n",
      "│    Medicare │               HISPANIC/LATINO │        M │                -0.0 │   0.005 │  -0.023 │              -0.0 │\n",
      "│    Medicare │                         WHITE │        F │               0.004 │  -0.022 │    0.03 │             0.011 │\n",
      "│    Medicare │                         WHITE │        M │               0.004 │  -0.025 │   0.029 │             0.011 │\n",
      "│       Other │                           any │      any │                -0.0 │   0.007 │  -0.002 │            -0.008 │\n",
      "│       Other │ AMERICAN INDIAN/ALASKA NATIVE │        F │                -0.0 │   0.012 │  -0.017 │              -0.0 │\n",
      "│       Other │ AMERICAN INDIAN/ALASKA NATIVE │        M │                 0.0 │ **0.029 │  -0.007 │               0.0 │\n",
      "│       Other │                         ASIAN │        F │                 0.0 │   0.023 │   0.001 │              -0.0 │\n",
      "│       Other │                         ASIAN │        M │               0.001 │   0.009 │   0.011 │               0.0 │\n",
      "│       Other │        BLACK/AFRICAN AMERICAN │        F │              -0.006 │   0.011 │  -0.036 │             -0.01 │\n",
      "│       Other │        BLACK/AFRICAN AMERICAN │        M │              -0.001 │   0.014 │  -0.028 │            -0.003 │\n",
      "│       Other │               HISPANIC/LATINO │        F │              -0.002 │   0.014 │   -0.04 │            -0.004 │\n",
      "│       Other │               HISPANIC/LATINO │        M │              -0.001 │   0.006 │  -0.025 │            -0.001 │\n",
      "│       Other │                         WHITE │        F │               0.004 │   0.009 │   0.014 │             0.002 │\n",
      "│       Other │                         WHITE │        M │               0.006 │  -0.005 │   0.021 │             0.008 │\n",
      "╰─────────────┴───────────────────────────────┴──────────┴─────────────────────┴─────────┴─────────┴───────────────────╯\n",
      "Subgroups with Largest Deviations\n",
      "--------------------\n",
      "Brier Score (MSE)\n",
      "----------\n",
      "- Subgroup: ethnicity=WHITE\n",
      "- Brier Score (MSE) is 19.3 % higher among this group than the population.\n",
      "\n",
      "FNR\n",
      "----------\n",
      "- Subgroup: insurance=Other,ethnicity=AMERICAN INDIAN/ALASKA NATIVE,gender=M\n",
      "- FNR is 10.9 % higher among this group than the population.\n",
      "\n",
      "FPR\n",
      "----------\n",
      "- Subgroup: insurance=Medicare,ethnicity=AMERICAN INDIAN/ALASKA NATIVE,gender=F\n",
      "- FPR is 62.3 % higher among this group than the population.\n",
      "\n",
      "Positivity Rate\n",
      "----------\n",
      "- Subgroup: ethnicity=BLACK/AFRICAN AMERICAN\n",
      "- Positivity Rate is 28.8 % lower among this group than the population.\n",
      "\n",
      "saving results to df_fairness.post.csv\n"
     ]
    }
   ],
   "source": [
    "from measure_disparity import measure_disparity\n",
    "measure_disparity('../fomo_model_mimic4_admission.csv', save_file='df_fairness.post.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "66efb1da",
   "metadata": {},
   "source": [
    "## Improvements over Baseline Model\n",
    "\n",
    "If we compare with results from our baseline model in [demo_measure_disparity.ipynb](https://cavalab.org/interfair/demo_measure_disparity.html), we see that we have made a marked improvement to the maximum subgroup deviations on the test set:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "94faa3bb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "╭────────────────────────────────────────┬────────────┬───────╮\n",
      "│ Max Subgroup Deviation in Metric (%)   │   Original │   New │\n",
      "├────────────────────────────────────────┼────────────┼───────┤\n",
      "│ Brier Score (MSE)                      │       19.9 │  19.3 │\n",
      "│ Subgroup FNR                           │       20.4 │  10.9 │\n",
      "│ Subgroup FPR                           │       86   │  62.3 │\n",
      "│ Positivity Rate                        │       44.9 │  28.8 │\n",
      "╰────────────────────────────────────────┴────────────┴───────╯\n"
     ]
    }
   ],
   "source": [
    "from tabulate import tabulate\n",
    "print(\n",
    "    tabulate(\n",
    "        [\n",
    "        [\"Max Subgroup Deviation in Metric (%)\",\"Original\",\"New\"],\n",
    "        [\"Brier Score (MSE)\",19.9, 19.3],\n",
    "        [\"Subgroup FNR\", 20.4, 10.9],\n",
    "        [\"Subgroup FPR\",86.0, 62.3],\n",
    "        [\"Positivity Rate\",44.9, 28.8],\n",
    "        ],\n",
    "        headers=\"firstrow\",\n",
    "        tablefmt='rounded_outline'\n",
    ")\n",
    "     )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4adca8b5",
   "metadata": {},
   "source": [
    "In summary, our new model has a more equal false negative rate among groups than before, which was our goal. \n",
    "In addition, we see reductions in the false positive rate deviations and differences in positivity rates. \n",
    "\n",
    "In terms of overall performance, we see a slight decrease, as we would also expect:\n",
    "\n",
    "- AUROC: 0.881 -> 0.859\n",
    "- AUPRC: 0.77 -> 0.74\n",
    "\n",
    "\n",
    "By using the model visualization tools above, decision makers can decide whether this model, or another within the set, is a better fit to the use case, as needed. "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
