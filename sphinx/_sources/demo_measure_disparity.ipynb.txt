{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "a1387f84",
   "metadata": {},
   "source": [
    "# Measuring Disparities\n",
    "\n",
    "`measure_disparity.py` takes as input a [pandas Dataframe](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html) containing the following observations:\n",
    "    - model predictions and probabilities\n",
    "    - binary outcomes\n",
    "    - demographics\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "060f43c7",
   "metadata": {},
   "source": [
    "## run measure_disparity.py on model output\n",
    "\n",
    "To run `measure_disparity.py` on the dataframe, you may use the command line interface, as shown below. \n",
    "It is also possible to import the underlying function like so:\n",
    "\n",
    "```python\n",
    "from measure_disparity import measure_disparity\n",
    "```\n",
    "\n",
    "And then call the function. See the [API](https://cavalab.org/interfair/api.html) for a full specification of options and requirements. \n",
    "\n",
    "Below, we demonstrate how to run `measure_disparity.py` from the command line using a model trained to predict risk of admission to the emergency department using the freely available [MIMIC-IV repository](https://www.nature.com/articles/s41597-022-01899-x). "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6df7ca69",
   "metadata": {},
   "outputs": [],
   "source": [
    "%run ../measure_disparity.py --dataset ../base_model_mimic4_admission.csv "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e938b7d5",
   "metadata": {},
   "source": [
    "## Visualizing results\n",
    "\n",
    "Running `measure_disparity.py` produces a `df_fairness.csv` file containing the resultant fairness metrics. Below, we show how to use this to generate additional figures for assessing model performance and bias. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1efc28f1",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_fairness = pd.read_csv('df_fairness.csv') \n",
    "df_plt = (df_fairness\n",
    "          .melt(\n",
    "              id_vars = ['insurance','ethnicity','gender']\n",
    "          )\n",
    "         )\n",
    "df_plt = df_plt.loc[~df_plt.variable.str.contains('Brier')]          \n",
    "df_fairness\n",
    "import seaborn as sns\n",
    "sns.set_theme(style='whitegrid',font_scale=1.3)\n",
    "\n",
    "g = sns.catplot(\n",
    "    kind='bar',\n",
    "    edgecolor=\"0.8\",\n",
    "    data=df_plt,\n",
    "    row='variable',\n",
    "    col='ethnicity',\n",
    "    x='gender',\n",
    "    hue='insurance',\n",
    "    y='value',\n",
    "    sharey='row',\n",
    "    aspect=0.75,\n",
    "    palette='Set3'\n",
    ")\n",
    "\n",
    "g.refline(y=0)\n",
    "\n",
    "# make titles nicer \n",
    "\n",
    "nice_cols = {\n",
    "'AMERICAN INDIAN/ALASKA NATIVE':'AI/AN',\n",
    "    'BLACK/AFRICAN AMERICAN':'BLACK',\n",
    "    'HISPANIC/LATINO':'HISP/LTN',\n",
    "    'WHITE':'WHITE',\n",
    "    '  any  ':'ANY',\n",
    "    'ASIAN':'ASIAN'\n",
    "}\n",
    "for (row,col),ax in g.axes_dict.items():\n",
    "    if 'any' in col: \n",
    "        ax.set_ylabel(row)\n",
    "    if row == 'FNR':\n",
    "        ax.set_title(nice_cols[col])\n",
    "    else:\n",
    "        ax.set_title('')\n",
    "        "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
